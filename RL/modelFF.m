function [Y,Xf,Af] = modelFF(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-Nov-2021 02:27:31.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx1 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2.478121;
x1_step1.gain = 1.30014074023513;
x1_step1.ymin = -1;

% Layer 1
b1 = [14.29438159153691501;10.929812502385203743;-7.6557959893995093381;4.7284394840675387783;-1.678111307939336827;-1.9857623386315623737;-4.5139962995680802393;7.582441794047514172;10.770279208680499039;14.160605633016464466];
IW1_1 = [-13.669690222476521768;-13.974980539990921713;14.056376577596951805;-13.976327535716134065;13.979783382746090226;-13.945507062316433888;-14.040033721423053947;14.102326445453622128;14.090240177906258268;13.847031923666424547];

% Layer 2
b2 = 0.0027853081954393732467;
LW2_1 = [-0.12322011495581133844 -0.0041921580231172247966 0.0095132706903545850158 -0.0066563130083737718015 0.0084963526854715861608 -0.011690583369412470283 -0.0046730774426169737618 0.015128836695002523954 0.010119522357520727152 -0.0092541622664857395297];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.929292891745742;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
